[
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {
            "value": "\n```python\nimport pyperclip\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {
            "value": "\n```python\nimport unittest\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Credentials",
        "importPath": "password_locker",
        "description": "password_locker",
        "isExtraImport": true,
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nimport password_locker\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "importPath": "password_locker",
        "description": "password_locker",
        "isExtraImport": true,
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nimport password_locker\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Credentials",
        "importPath": "password_locker",
        "description": "password_locker",
        "isExtraImport": true,
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nimport password_locker\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "importPath": "password_locker",
        "description": "password_locker",
        "isExtraImport": true,
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nimport password_locker\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {
            "value": "\n```python\nimport string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "credentials_test",
        "description": "credentials_test",
        "peekOfCode": "class TestUser(unittest.TestCase):   \n    def setUp(self):\n        '''\n        Set up method to run before each test cases.\n        '''\n        self.new_credentials = Credentials( \"twitter\", \"akumu_collins\", \"1234\")# create credential object\n    def test_init(self):\n        '''\n        Test_init test case to test if the object is initialized properly\n        '''",
        "detail": "credentials_test",
        "documentation": {
            "value": "\n```python\nfrom credentials_test import TestUser\n```\n\n```python\n\n\n```\n\n```python\nclass TestUser(unittest.TestCase):   \n    def setUp(self):\n        '''\n        Set up method to run before each test cases.\n        '''\n        self.new_credentials = Credentials( \"twitter\", \"akumu_collins\", \"1234\")# create credential object\n    def test_init(self):\n        '''\n        Test_init test case to test if the object is initialized properly\n        '''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "password_locker",
        "description": "password_locker",
        "peekOfCode": "class User:\n    \"\"\"\n      Class that generates new instances of user.\n    \"\"\"\n    user_list = []\n    def __init__(self,first_name,last_name,user_name,password):\n      # docstring removed for simplicity\n        self.first_name = first_name\n        self.last_name = last_name\n        self.user_name = user_name ",
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nfrom password_locker import User\n```\n\n```python\n\n\n```\n\n```python\nclass User:\n    \"\"\"\n      Class that generates new instances of user.\n    \"\"\"\n    user_list = []\n    def __init__(self,first_name,last_name,user_name,password):\n      # docstring removed for simplicity\n        self.first_name = first_name\n        self.last_name = last_name\n        self.user_name = user_name \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Credentials",
        "kind": 6,
        "importPath": "password_locker",
        "description": "password_locker",
        "peekOfCode": "class Credentials:\n    \"\"\"\n      Class that generates new instances of credentials.\n    \"\"\"\n    credentials_list = []\n    def __init__(self,account_name,user_name,password):\n        # docstring removed for simplicity\n        self.account_name = account_name\n        self.user_name = user_name\n        self.password = password ",
        "detail": "password_locker",
        "documentation": {
            "value": "\n```python\nfrom password_locker import Credentials\n```\n\n```python\n\n\n```\n\n```python\nclass Credentials:\n    \"\"\"\n      Class that generates new instances of credentials.\n    \"\"\"\n    credentials_list = []\n    def __init__(self,account_name,user_name,password):\n        # docstring removed for simplicity\n        self.account_name = account_name\n        self.user_name = user_name\n        self.password = password \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_signup",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def create_signup(first_name, last_name, confirm_password):\n    \"\"\"\n    Function to create a first time signup\n    \"\"\"\n    new_user = User(first_name, last_name, confirm_password)\n    return new_user\ndef save_user(user):\n    \"\"\"\n    Function to save user signup details\n    \"\"\"",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import create_signup\n```\n\n```python\n\n\n```\n\n```python\ndef create_signup(first_name, last_name, confirm_password):\n    \"\"\"\n    Function to create a first time signup\n    \"\"\"\n    new_user = User(first_name, last_name, confirm_password)\n    return new_user\ndef save_user(user):\n    \"\"\"\n    Function to save user signup details\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "save_user",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def save_user(user):\n    \"\"\"\n    Function to save user signup details\n    \"\"\"\n    user.save_user() \ndef add_credentials(default_accname, default_username, default_password):\n    \"\"\"\n    Function to add a new account and its credentials\n    \"\"\"\n    new_credentials = Credentials(default_accname, default_username, default_password)",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import save_user\n```\n\n```python\n\n\n```\n\n```python\ndef save_user(user):\n    \"\"\"\n    Function to save user signup details\n    \"\"\"\n    user.save_user() \ndef add_credentials(default_accname, default_username, default_password):\n    \"\"\"\n    Function to add a new account and its credentials\n    \"\"\"\n    new_credentials = Credentials(default_accname, default_username, default_password)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "add_credentials",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def add_credentials(default_accname, default_username, default_password):\n    \"\"\"\n    Function to add a new account and its credentials\n    \"\"\"\n    new_credentials = Credentials(default_accname, default_username, default_password)\n    return new_credentials\ndef save_credential(account):\n    \"\"\"\n    Function to save account credentials details\n    \"\"\"",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import add_credentials\n```\n\n```python\n\n\n```\n\n```python\ndef add_credentials(default_accname, default_username, default_password):\n    \"\"\"\n    Function to add a new account and its credentials\n    \"\"\"\n    new_credentials = Credentials(default_accname, default_username, default_password)\n    return new_credentials\ndef save_credential(account):\n    \"\"\"\n    Function to save account credentials details\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "save_credential",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def save_credential(account):\n    \"\"\"\n    Function to save account credentials details\n    \"\"\"\n    account.save_credentials() \ndef display_credentials(default_accname):\n    \"\"\"\n    Function to display  credentials_list\n    \"\"\"\n    return Credentials.display_credentials(default_accname)",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import save_credential\n```\n\n```python\n\n\n```\n\n```python\ndef save_credential(account):\n    \"\"\"\n    Function to save account credentials details\n    \"\"\"\n    account.save_credentials() \ndef display_credentials(default_accname):\n    \"\"\"\n    Function to display  credentials_list\n    \"\"\"\n    return Credentials.display_credentials(default_accname)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "display_credentials",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def display_credentials(default_accname):\n    \"\"\"\n    Function to display  credentials_list\n    \"\"\"\n    return Credentials.display_credentials(default_accname)\ndef find_credentials(default_accname):\n    '''\n    Function that finds credentials by account name\n    '''\n    return Credentials.find_by_name(default_accname)",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import display_credentials\n```\n\n```python\n\n\n```\n\n```python\ndef display_credentials(default_accname):\n    \"\"\"\n    Function to display  credentials_list\n    \"\"\"\n    return Credentials.display_credentials(default_accname)\ndef find_credentials(default_accname):\n    '''\n    Function that finds credentials by account name\n    '''\n    return Credentials.find_by_name(default_accname)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "find_credentials",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def find_credentials(default_accname):\n    '''\n    Function that finds credentials by account name\n    '''\n    return Credentials.find_by_name(default_accname)\ndef existing_credentials(default_accname):\n    '''\n    Functiion that checks if an account really exists\n    '''\n    return Credentials.credentials_exists(default_accname)",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import find_credentials\n```\n\n```python\n\n\n```\n\n```python\ndef find_credentials(default_accname):\n    '''\n    Function that finds credentials by account name\n    '''\n    return Credentials.find_by_name(default_accname)\ndef existing_credentials(default_accname):\n    '''\n    Functiion that checks if an account really exists\n    '''\n    return Credentials.credentials_exists(default_accname)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "existing_credentials",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def existing_credentials(default_accname):\n    '''\n    Functiion that checks if an account really exists\n    '''\n    return Credentials.credentials_exists(default_accname)\ndef delete_credentials(credentials):\n    \"\"\"\n    Function to delete an account\n    \"\"\"\n    return Credentials.delete_credentials(credentials)",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import existing_credentials\n```\n\n```python\n\n\n```\n\n```python\ndef existing_credentials(default_accname):\n    '''\n    Functiion that checks if an account really exists\n    '''\n    return Credentials.credentials_exists(default_accname)\ndef delete_credentials(credentials):\n    \"\"\"\n    Function to delete an account\n    \"\"\"\n    return Credentials.delete_credentials(credentials)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "delete_credentials",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def delete_credentials(credentials):\n    \"\"\"\n    Function to delete an account\n    \"\"\"\n    return Credentials.delete_credentials(credentials)\ndef main():\n    while True: \n        print(\"*** Welcome to Password Locker!!! ***\")\n        print('\\n')\n        print(\"Do you have an account with Password Locker? y/n\")",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import delete_credentials\n```\n\n```python\n\n\n```\n\n```python\ndef delete_credentials(credentials):\n    \"\"\"\n    Function to delete an account\n    \"\"\"\n    return Credentials.delete_credentials(credentials)\ndef main():\n    while True: \n        print(\"*** Welcome to Password Locker!!! ***\")\n        print('\\n')\n        print(\"Do you have an account with Password Locker? y/n\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def main():\n    while True: \n        print(\"*** Welcome to Password Locker!!! ***\")\n        print('\\n')\n        print(\"Do you have an account with Password Locker? y/n\")\n        option = input().lower()\n        if option == \"n\":\n            print(\"Signup to Password Locker account\")\n            print('Enter first name')\n            first_name = input()",
        "detail": "run",
        "documentation": {
            "value": "\n```python\nfrom run import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    while True: \n        print(\"*** Welcome to Password Locker!!! ***\")\n        print('\\n')\n        print(\"Do you have an account with Password Locker? y/n\")\n        option = input().lower()\n        if option == \"n\":\n            print(\"Signup to Password Locker account\")\n            print('Enter first name')\n            first_name = input()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "user_test",
        "description": "user_test",
        "peekOfCode": "class TestUser(unittest.TestCase):   \n    def setUp(self):\n        '''\n        Set up method to run before each test cases.\n        '''\n        self.new_user = User(\"Collins\", \"Akumu\", \"akumu_collins\", \"4321\") # create user object\n    def test_init(self):\n        '''\n        Test_init test case to test if the object is initialized properly\n        '''",
        "detail": "user_test",
        "documentation": {
            "value": "\n```python\nfrom user_test import TestUser\n```\n\n```python\n\n\n```\n\n```python\nclass TestUser(unittest.TestCase):   \n    def setUp(self):\n        '''\n        Set up method to run before each test cases.\n        '''\n        self.new_user = User(\"Collins\", \"Akumu\", \"akumu_collins\", \"4321\") # create user object\n    def test_init(self):\n        '''\n        Test_init test case to test if the object is initialized properly\n        '''\n```\n",
            "supportThemeIcons": false
        }
    }
]